lint:
  image: registry.gitlab.com/pipeline-components/black:latest
  script:
    - black --check --verbose --line-length 80 -- *.py

container-build:
  image: docker:dind
  services:
    - name: docker:dind
  variables:
    TORADEX_INTERNAL_DOCKERHUB_CACHE: "artifactory-horw.int.toradex.com/dockerhub-proxy-horw"
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker buildx create --name multiarch-builder --driver docker-container --platform linux/arm/v7,linux/arm64/v8,linux/amd64 --use
    - docker buildx inspect --bootstrap
    - docker run --privileged --rm ${TORADEX_INTERNAL_DOCKERHUB_CACHE}/tonistiigi/binfmt --install arm64,arm
    - docker buildx build --progress=plain --push --platform linux/arm64/v8,linux/amd64 -t ${CI_REGISTRY}/${CI_PROJECT_PATH}/aval:dev .

unit-test:
  image: ${CI_REGISTRY}/${CI_PROJECT_PATH}/aval:dev
  script:
    - coverage run -m unittest discover -v -s . -p 'test_*.py'
    - coverage report -m
    - coverage xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  needs:
    - container-build

# run against a database deployed by the maintainer. See CODEOWNERS.
e2e-test:
  image: ${CI_REGISTRY}/${CI_PROJECT_PATH}/aval:dev
  script:
    - /usr/local/bin/entrypoint.sh
  artifacts:
    when: always
    reports:
      junit: report.xml
  needs:
    - unit-test
